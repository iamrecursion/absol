// Language metadata
name : simple_test;

version : 0.0.1a;

using : {
    number,
    base,
    traverse
};

// Specification of the base-case semantics for this test language
truths : {
    {integer n <= <integer>},
    {floating n <= <floating>},
    {number n <= <number>}
};

language : {

// The start symbol
<<simple_test>> ::= <statement> | <a> ;

// Productions whose semantics should be inferred.
<statement> ::= <my-number> | <number> | <arith-expr> | <test> | <assignment> ;
<my-number> ::= <integer> | <floating> ;

// Should have inferred semantics, mutually recurses with <arith-op>.
<arith-expr> ::= <my-number> | <arith-op> ;

// Mutually recursive productions with infinite syntax.
// These should not impact on successful verification.
<a> ::= <b> ;
<b> ::= <a> ;

// A production that should not have semantics as it's never used semantically.
<empty> ::= ""; 

// Testing user-defined semantics with both kinds of alternations. 
// Testing guard verification.
<arith-op> ::= 
    <arith-expr> "+" <arith-expr> --> {
        number n : {n = n1 + n2}() :
            {number n1 <= <arith-expr>[0]}, {number n2 <= <arith-expr>[1]}
    } |
    <arith-expr> "-" <arith-expr> --> {
        number n : {n = n1 - n2}() :
            {number n1 <= <arith-expr>[0]}, {number n2 <= <arith-expr>[1]}
    } |
    <arith-expr> "*" <arith-expr> --> {
        number n : {n = n1 * n2}() :
            {number n1 <= <arith-expr>[0]}, {number n2 <= <arith-expr>[1]}
    } |
    <arith-expr> "/" <arith-expr> --> {
        number n : {n = n1 / n2}() :
            {number n1 <= <arith-expr>[0]}, {number n2 <= <arith-expr>[1]}
    } |
    <arith-expr> "^" <arith-expr> --> {
        number n : {n = 1}(n1 == 1) :
            {number n1 <= <arith-expr>[0]}, {number n2 <= <arith-expr>[1]} |
        number n : {n = n1 * n1}(n2 == 2) :
            {number n1 <= <arith-expr>[0]}, {number n2 <= <arith-expr>[1]} |
        number n : {n = n1 ^ n2}() :
            {number n1 <= <arith-expr>[0]}, {number n2 <= <arith-expr>[1]}
    };

// Test for parsing and checking of environment input rules. 
<assignment> ::= <statement> "=" <arith-expr> <empty> --> {
    none e <-- <statement>[0] : <arith-expr>[0]
};

// Test for parsing and checking of special syntax rules. 
<test> ::= <statement> "traverse" <statement> --> {
    any map(<statement>[0], <statement>[1])
};

<env-access> ::= <statement> --> {
    any e.<statement>[0]
};

};
